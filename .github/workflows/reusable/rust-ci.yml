---
name: Rust CI
on:
  workflow_call:
    inputs:
      channel:
        required: false
        type: string
        default: "stable"
      use-nextest:
        required: false
        type: boolean
        default: true
      coverage:
        required: false
        type: boolean
        default: true
      use-sccache:
        required: false
        type: boolean
        default: false
      msrv:
        required: false
        type: string
        default: ""
      features:
        required: false
        type: string
        default: ""
      no-default-features:
        required: false
        type: boolean
        default: false
      workspace-members:
        required: false
        type: string
        default: ""
      run-cargo-deny:
        required: false
        type: boolean
        default: true
      install-alsa:
        required: false
        type: boolean
        default: false
      install-apt-packages:
        required: false
        type: string
        default: ""
      crate-system-deps:
        required: false
        type: string
        default: "{}"
      run-audit:
        required: false
        type: boolean
        default: true
permissions:
  contents: read
env:
  RUSTFLAGS: -D warnings
jobs:
  detect-members:
    runs-on: ubuntu-latest
    outputs:
      members: ${{ steps.detect.outputs.members }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
      - uses: dtolnay/rust-toolchain@1482605bfc5719782e1267fd0c0cc350fe7646b8
        with:
          toolchain: stable
      - name: Detect workspace members
        id: detect
        run: |
          if [ -n "${{ inputs.workspace-members }}" ]; then
            MEMBERS="${{ inputs.workspace-members }}"
          elif [ -f "Cargo.toml" ] && grep -q "\[workspace\]" Cargo.toml; then
            MEMBERS=$(cargo metadata --no-deps --format-version 1 | \
              jq -r '.workspace_members[] | split(" ")[0] | split("/")[-1]' | \
              tr '\n' ' ')
          else
            MEMBERS="."
          fi
          # Convert space-separated string to a JSON matrix for the strategy context.
          MATRIX=$(printf '%s\n' "$MEMBERS" | jq -R -c 'split(" ") | map(select(length > 0)) | {include: map({member: .})}')
          echo "members=$MEMBERS" >> $GITHUB_OUTPUT
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  rust:
    needs: detect-members
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.detect-members.outputs.matrix) }}
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@1482605bfc5719782e1267fd0c0cc350fe7646b8 # pinned
        with:
          toolchain: ${{ inputs.channel }}
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          key: ${{ matrix.member }}-${{ inputs.features }}
      - if: inputs.use-sccache
        uses: mozilla-actions/sccache-action@c94e5a96e0ba0fb6816ceae10c4cd8e800724ddd # v0.0.6
      - if: inputs.install-alsa
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev
      - if: inputs.install-apt-packages != ''
        run: sudo apt-get update && sudo apt-get install -y ${{ inputs.install-apt-packages }}
      - name: Install crate-specific apt packages
        if: inputs.crate-system-deps != '{}'
        run: |
          PACKAGES=$(echo '${{ inputs.crate-system-deps }}' | jq -r '."${{ matrix.member }}" // empty')
          if [ -n "$PACKAGES" ]; then
            sudo apt-get update && sudo apt-get install -y $PACKAGES
          fi
      - if: inputs.use-nextest
        uses: taiki-e/install-action@5ff18d7fb42b9cb96e9b08bd87f965bb411b4daf # v2.44.45
        with:
          tool: cargo-nextest
      - name: Prepare cargo arguments
        id: prep_args
        run: |
          PACKAGE_ARG=""
          if [ "${{ matrix.member }}" != "." ]; then
            PACKAGE_ARG="-p ${{ matrix.member }}"
          else
            PACKAGE_ARG="--workspace"
          fi
          echo "PACKAGE_ARG=${PACKAGE_ARG}" >> $GITHUB_ENV

          FEATURES_ARG=""
          if [ "${{ inputs.no-default-features }}" = "true" ]; then
            FEATURES_ARG="--no-default-features"
          fi
          if [ -n "${{ inputs.features }}" ]; then
            FEATURES_ARG="${FEATURES_ARG} --features '${{ inputs.features }}'"
          fi
          echo "FEATURES_ARG=${FEATURES_ARG}" >> $GITHUB_ENV
      - name: Format & Clippy
        run: |
          cargo fmt ${{ env.PACKAGE_ARG }} -- --check
          cargo clippy ${{ env.PACKAGE_ARG }} --all-targets ${{ env.FEATURES_ARG }} -- -D warnings
      - name: Build
        run: cargo build ${{ env.PACKAGE_ARG }} --all-targets --locked ${{ env.FEATURES_ARG }}
      - name: Test
        run: |
          if ${{ inputs.use-nextest }}; then
            cargo nextest run ${{ env.PACKAGE_ARG }} --locked ${{ env.FEATURES_ARG }}
          else
            cargo test ${{ env.PACKAGE_ARG }} --locked ${{ env.FEATURES_ARG }} -- --nocapture
          fi
      - if: inputs.coverage
        name: Coverage (llvm-cov)
        run: |
          cargo install cargo-llvm-cov --locked
          cargo llvm-cov ${{ env.PACKAGE_ARG }} --lcov --output-path lcov-${{ matrix.member }}.info ${{ env.FEATURES_ARG }}
      - if: inputs.coverage && always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true)
        uses: codecov/codecov-action@4fe8c5f003fae66aa5ebb77cfd3eaf9f93d6a8dc # v4.5.0
        with:
          files: lcov-${{ matrix.member }}.info
          flags: rust

  rust-msrv:
    if: inputs.msrv != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
      - uses: dtolnay/rust-toolchain@1482605bfc5719782e1267fd0c0cc350fe7646b8 # pinned
        with:
          toolchain: ${{ inputs.msrv }}
      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          key: msrv-${{ inputs.msrv }}
      - if: inputs.install-alsa
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev
      - if: inputs.install-apt-packages != ''
        run: sudo apt-get update && sudo apt-get install -y ${{ inputs.install-apt-packages }}
      - name: Install crate-specific apt packages (MSRV)
        if: inputs.crate-system-deps != '{}'
        run: |
          PACKAGES=$(echo '${{ inputs.crate-system-deps }}' | jq -r '.["."] // empty')
          if [ -n "$PACKAGES" ]; then
            sudo apt-get update && sudo apt-get install -y $PACKAGES
          fi
      - name: Build with MSRV
        run: cargo build --workspace --locked --no-default-features
      - name: Test with MSRV
        run: cargo test --workspace --locked --no-default-features

  cargo-deny:
    if: inputs.run-cargo-deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
      - uses: EmbarkStudios/cargo-deny-action@8371184bd11e21dcf8ac82ebf8c9c9f74ebf7268 # v2.0.1
        with:
          command: check all
          arguments: --workspace

  cargo-audit:
    if: inputs.run-audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
      - uses: dtolnay/rust-toolchain@1482605bfc5719782e1267fd0c0cc350fe7646b8
      - name: Security audit (rustsec)
        uses: rustsec/audit-check@dd51754611baa5c0affe6c19adb60f61f165e6e4 # v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
