name: Python CI
on:
  workflow_call:
    inputs:
      python-versions: { required: false, type: string, default: '["3.12"]' }
      pkg-manager:     { required: false, type: string, default: "auto" }
      lint:            { required: false, type: boolean, default: true }
      typecheck:       { required: false, type: boolean, default: true }
      coverage:        { required: false, type: boolean, default: true }
      security-check:  { required: false, type: boolean, default: true }
      pip-audit:       { required: false, type: boolean, default: true }
permissions:
  contents: read
jobs:
  py:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJSON(inputs.python-versions) }}
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
        with:
          fetch-depth: 0
      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ matrix.version }}
          cache: 'pip'
      - name: Install deps (auto-detect manager)
        run: |
          set -e
          if [[ "${{ inputs.pkg-manager }}" == "uv" ]] || [[ -f "uv.lock" ]]; then
            pip install uv
            uv sync --frozen
          elif [[ -f "poetry.lock" ]] || ( [[ -f "pyproject.toml" ]] && grep -q '\[tool\.poetry\]' pyproject.toml ); then
            pip install poetry
            poetry install --no-interaction --no-root
          elif [[ -f "pdm.lock" ]] || ( [[ -f "pyproject.toml" ]] && grep -q '\[tool\.pdm\]' pyproject.toml ); then
            pip install pdm
            pdm install
          elif compgen -G "requirements*.txt" > /dev/null; then # Shell glob for requirements.txt, requirements-dev.txt etc.
            python -m pip install -r requirements.txt
          else
            # This may fail if a project has no 'test' extra.
            # It's better to fail and fix the project's setup than to silently pass.
            python -m pip install -e .[test]
          fi
      - name: Install CI tools
        run: python -m pip install ruff mypy bandit[toml] pip-audit pytest pytest-xdist pytest-cov
      - if: inputs.lint
        name: Lint with ruff
        run: |
          ruff check .
          ruff format --check .
      # It's better to fail the build on type errors than to ignore them.
      # If this check should be informational, use `continue-on-error: true`
      # instead of `|| true` for better visibility in the UI.
      - if: inputs.typecheck
        name: Type check with mypy
        run: mypy .
      - name: Run tests
        run: pytest -n auto --maxfail=1 --cov --cov-report=term-missing
      - if: inputs.coverage
        name: Generate coverage
        run: coverage xml -o coverage.xml
      - if: inputs.coverage && always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true)
        uses: codecov/codecov-action@4fe8c5f003fae66aa5ebb77cfd3eaf9f93d6a8dc # v4.5.0
        with:
          files: coverage.xml
          flags: python
      # Security issues should fail the build.
      # Use `continue-on-error: true` if this is intended to be informational.
      - if: inputs.security-check
        name: Security check
        run: bandit -r . -ll
      - if: inputs.pip-audit
        name: Dependency vulnerability audit (pip-audit)
        run: |
          python -m pip install pip-audit
          # Try multiple project layouts
          if compgen -G "requirements*.txt" > /dev/null; then
            pip-audit -r requirements.txt
          else
            pip-audit
          fi
