---
name: Lang CI (router)

on:
  pull_request:
  push:
  workflow_dispatch:
    inputs:
      python-versions:
        description: Python versions to test
        type: string
        default: '["3.10","3.11","3.12"]'
      pkg-manager:
        description: Package manager (auto|uv|pip|poetry|pdm)
        type: string
        default: auto
      python-lint:
        description: Run Python linting
        type: boolean
        default: true
      python-typecheck:
        description: Run Python type checking
        type: boolean
        default: true
      python-coverage:
        description: Generate Python coverage + upload
        type: boolean
        default: true
      python-security-check:
        description: Run Python security checks
        type: boolean
        default: true
      rust-channel:
        description: Rust toolchain channel
        type: string
        default: stable
      rust-use-nextest:
        description: Use cargo-nextest
        type: boolean
        default: true
      rust-coverage:
        description: Generate Rust coverage + upload
        type: boolean
        default: true
      rust-msrv:
        description: Minimum Supported Rust Version (optional)
        type: string
        default: ""
      rust-features:
        description: Cargo features (optional)
        type: string
        default: ""
      rust-use-sccache:
        description: Use sccache for Rust builds
        type: boolean
        default: false
      rust-no-default-features:
        description: Disable default features
        type: boolean
        default: false
      rust-workspace-members:
        description: Specific workspace members to test
        type: string
        default: ""
      rust-run-cargo-deny:
        description: Run cargo-deny checks
        type: boolean
        default: true
      rust-install-alsa:
        description: Install ALSA libraries
        type: boolean
        default: false
      rust-install-apt-packages:
        description: Additional apt packages to install
        type: string
        default: ""
      crate_system_deps:
        description: JSON object mapping crate names to apt packages
        type: string
        default: "{}"

workflow_call:
  inputs:
    python-versions:
      type: string
      default: '["3.10","3.11","3.12"]'
    pkg-manager:
      type: string
      default: auto
    python-lint:
      type: boolean
      default: true
    python-typecheck:
      type: boolean
      default: true
    python-coverage:
      type: boolean
      default: true
    python-security-check:
      type: boolean
      default: true
    rust-channel:
      type: string
      default: stable
    rust-use-nextest:
      type: boolean
      default: true
    rust-coverage:
      type: boolean
      default: true
    rust-use-sccache:
      type: boolean
      default: false
    rust-msrv:
      type: string
      default: ""
    rust-features:
      type: string
      default: ""
    rust-no-default-features:
      type: boolean
      default: false
    rust-workspace-members:
      type: string
      default: ""
    rust-run-cargo-deny:
      type: boolean
      default: true
    rust-install-alsa:
      type: boolean
      default: false
    rust-install-apt-packages:
      type: string
      default: ""
    crate_system_deps:
      type: string
      default: "{}"

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      has_python: ${{ steps.filter.outputs.python }}
      has_rust: ${{ steps.filter.outputs.rust }}
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.1.7
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            python:
              - 'pyproject.toml'
              - '**/*.py'
              - 'requirements.txt'
              - 'poetry.lock'
              - 'uv.lock'
            rust:
              - 'Cargo.toml'
              - 'Cargo.lock'
              - '**/*.rs'

  python:
    if: needs.detect.outputs.has_python == 'true'
    needs: detect
    uses: ./.github/workflows/reusable/python-ci.yml
    concurrency:
      group: ${{ github.workflow }}-python-${{ github.ref }}
      cancel-in-progress: true
    with:
      python-versions: ${{ inputs.python-versions || '["3.10","3.11","3.12"]' }}
      pkg-manager: ${{ inputs.pkg-manager || 'auto' }}
      lint: ${{ inputs.python-lint }}
      typecheck: ${{ inputs.python-typecheck }}
      coverage: ${{ inputs.python-coverage }}
      security-check: ${{ inputs.python-security-check }}
      pip-audit: ${{ inputs.python-security-check }}  # Use same default as security-check
    secrets: inherit

  rust:
    if: needs.detect.outputs.has_rust == 'true'
    needs: detect
    uses: ./.github/workflows/reusable/rust-ci.yml
    concurrency:
      group: ${{ github.workflow }}-rust-${{ github.ref }}
      cancel-in-progress: true
    with:
      channel: ${{ inputs.rust-channel || 'stable' }}
      use-nextest: ${{ inputs.rust-use-nextest }}
      coverage: ${{ inputs.rust-coverage }}
      use-sccache: ${{ inputs.rust-use-sccache }}
      msrv: ${{ inputs.rust-msrv || '' }}
      features: ${{ inputs.rust-features || '' }}
      no-default-features: ${{ inputs.rust-no-default-features }}
      workspace-members: ${{ inputs.rust-workspace-members || '' }}
      run-cargo-deny: ${{ inputs.rust-run-cargo-deny }}
      install-alsa: ${{ inputs.rust-install-alsa }}
      install-apt-packages: ${{ inputs.rust-install-apt-packages || '' }}
      crate-system-deps: ${{ inputs.crate_system_deps || '{}' }}
      run-audit: ${{ inputs.rust-run-cargo-deny }}  # Use same default as cargo-deny
    secrets: inherit
