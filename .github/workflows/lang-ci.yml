name: Lang CI (router)
on:
  pull_request:
  push:
  workflow_dispatch:
    inputs:
      python-versions:
        description: "Python versions to test"
        type: string
        default: '["3.10","3.11","3.12"]'
      pkg-manager:
        description: "Package manager (auto|uv|pip|poetry|pdm)"
        type: string
        default: "auto"
      python-lint:
        description: "Run Python linting"
        type: boolean
        default: true
      python-typecheck:
        description: "Run Python type checking"
        type: boolean
        default: true
      python-coverage:
        description: "Run Python coverage"
        type: boolean
        default: true
      python-security-check:
        description: "Run Python security check"
        type: boolean
        default: true
      rust-channel:
        description: "Rust toolchain channel"
        type: string
        default: "stable"
      rust-use-nextest:
        description: "Use cargo-nextest"
        type: boolean
        default: true
      rust-coverage:
        description: "Run Rust coverage"
        type: boolean
        default: true
      rust-use-sccache:
        description: "Use sccache"
        type: boolean
        default: false
      rust-msrv:
        description: "Minimum Supported Rust Version"
        type: string
        default: ""
      rust-features:
        description: "Cargo features"
        type: string
        default: ""
      rust-no-default-features:
        description: "No default features"
        type: boolean
        default: false
      rust-workspace-members:
        description: "Workspace members"
        type: string
        default: ""
      rust-run-cargo-deny:
        description: "Run cargo-deny"
        type: boolean
        default: true
      rust-install-alsa:
        description: "Install ALSA"
        type: boolean
        default: false
      rust-install-apt-packages:
        description: "APT packages to install"
        type: string
        default: ""

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      has_python: ${{ steps.f.outputs.python }}
      has_rust: ${{ steps.f.outputs.rust }}
    steps:
      - uses: actions/checkout@v4
      - id: f
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            python:
              - 'pyproject.toml'
              - '**/*.py'
              - 'requirements*.txt'
              - 'poetry.lock'
              - 'uv.lock'
            rust:
              - 'Cargo.toml'
              - 'Cargo.lock'
              - '**/*.rs'

  python:
    if: needs.detect.outputs.has_python == 'true'
    needs: detect
    uses: ./.github/workflows/reusable/python-ci.yml
    concurrency:
      group: ${{ github.workflow }}-python-${{ github.ref }}
      cancel-in-progress: true
    with:
      python-versions: ${{ github.event.inputs.python-versions || '["3.10","3.11","3.12"]' }}
      pkg-manager: ${{ github.event.inputs.pkg-manager || 'auto' }}
      lint: ${{ github.event.inputs.python-lint == 'true' }}
      typecheck: ${{ github.event.inputs.python-typecheck == 'true' }}
      coverage: ${{ github.event.inputs.python-coverage == 'true' }}
      security-check: ${{ github.event.inputs.python-security-check == 'true' }}
    secrets: inherit

  rust:
    if: needs.detect.outputs.has_rust == 'true'
    needs: detect
    uses: ./.github/workflows/reusable/rust-ci.yml
    concurrency:
      group: ${{ github.workflow }}-rust-${{ github.ref }}
      cancel-in-progress: true
    with:
      channel: ${{ github.event.inputs.rust-channel || 'stable' }}
      use-nextest: ${{ github.event.inputs.rust-use-nextest == 'true' }}
      coverage: ${{ github.event.inputs.rust-coverage == 'true' }}
      use-sccache: ${{ github.event.inputs.rust-use-sccache == 'true' }}
      msrv: ${{ github.event.inputs.rust-msrv || '' }}
      features: ${{ github.event.inputs.rust-features || '' }}
      no-default-features: ${{ github.event.inputs.rust-no-default-features == 'true' }}
      workspace-members: ${{ github.event.inputs.rust-workspace-members || '' }}
      run-cargo-deny: ${{ github.event.inputs.rust-run-cargo-deny == 'true' }}
      install-alsa: ${{ github.event.inputs.rust-install-alsa == 'true' }}
      install-apt-packages: ${{ github.event.inputs.rust-install-apt-packages || '' }}
    secrets: inherit